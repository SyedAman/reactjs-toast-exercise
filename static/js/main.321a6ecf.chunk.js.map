{"version":3,"sources":["service/mockServer.js","Header.js","Content.js","Toast.js","App.js","index.js"],"names":["chance","Chance","callbacks","randomPercent","Math","floor","random","fetchLikedFormSubmissions","a","Promise","resolve","reject","setTimeout","status","message","formSubmissions","JSON","parse","localStorage","getItem","e","saveLikedFormSubmission","formSubmission","submissions","updatedSubmissions","setItem","stringify","Header","Box","sx","flexGrow","AppBar","position","Toolbar","IconButton","edge","color","marginRight","Typography","variant","Button","size","onClick","id","guid","data","email","firstName","first","lastName","last","liked","forEach","cb","createMockFormSubmission","LikedFormSubmissionListItem","likedForm","fontStyle","marginTop","generateListOfLikedFormSubmissions","likedForms","map","Content","Toast","open","lastSubmittedForm","onClose","onLike","likeSubmissionAction","Fragment","event","reason","fontSize","snackbarMessage","submittedForm","formSnackbarMessage","Snackbar","action","App","props","likeFormSubmission","state","addLikedFormLocally","persistLikedForms","hydrateLikedForms","retryUntilSucceeded","closeSnackbar","likedFormSubmissions","getPersistedLikedForms","bShowSnackbar","this","callback","form","onFormSubmitted","push","tearDownSnackbarTimer","result","setState","openSnackbarFor5Seconds","asyncRequest","args","retriesLeft","snackbarTimerId","clearTimeout","window","Container","handleCloseSnackbar","React","Component","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.321a6ecf.chunk.js","sourcesContent":["// NOTE: Do not modify this file\r\nimport Chance from 'chance';\r\n\r\nconst chance = new Chance();\r\nconst callbacks = [];\r\nfunction randomPercent() {\r\n  return Math.floor(Math.random() * 100);\r\n}\r\n\r\n/**\r\n * When we get a message from the \"server\", the callback is executed\r\n * with the form data.\r\n *\r\n * @params {function} callback - The function called with form data.\r\n */\r\nexport function onMessage(callback) {\r\n  callbacks.push(callback);\r\n}\r\n\r\n/**\r\n * Fetch all of the liked form submissions from the \"server\".\r\n *\r\n * @return {Promise} on success, resolve with list of form\r\n * submissions. We have a flaky server and requests will fail 10\r\n * percent of the time.\r\n */\r\nexport async function fetchLikedFormSubmissions() {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      // We have a really flaky server that has issues\r\n      if (randomPercent() < 10) {\r\n        reject({ status: 500, message: 'server error' });\r\n        return;\r\n      }\r\n\r\n      try {\r\n        resolve({\r\n          status: 200,\r\n          formSubmissions:\r\n            JSON.parse(localStorage.getItem('formSubmissions')) || [],\r\n        });\r\n      } catch (e) {\r\n        reject({ status: 500, message: e.message });\r\n      }\r\n    }, 3000 * (randomPercent() / 100));\r\n  });\r\n}\r\n\r\n/**\r\n * Saves a liked form submission to the server.\r\n *\r\n * @params {FormSubmission} formSubmission\r\n * \r\n * @return {Promise} resolves or rejects with a simple message.\r\n * We have a flaky server and requests will fail 10\r\n * percent of the time.\r\n */\r\nexport async function saveLikedFormSubmission(formSubmission) {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      // We have a really flakey server that has issues\r\n      if (randomPercent() < 10) {\r\n        reject({ status: 500, message: 'server error' });\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const submissions = JSON.parse(localStorage.getItem('formSubmissions')) || [];\r\n        const updatedSubmissions = [...submissions, formSubmission];\r\n\r\n        localStorage.setItem(\r\n          'formSubmissions',\r\n          JSON.stringify(updatedSubmissions),\r\n        );\r\n        resolve({ status: 202, message: 'Success!' });\r\n      } catch (e) {\r\n        reject({ status: 500, message: e.message });\r\n      }\r\n    }, 3000 * (randomPercent() / 100));\r\n  });\r\n}\r\n\r\n/**\r\n * Creates a mock server response\r\n */\r\nexport function createMockFormSubmission() {\r\n  const formSubmission = {\r\n    id: chance.guid(),\r\n    data: {\r\n      email: chance.email(),\r\n      firstName: chance.first(),\r\n      lastName: chance.last(),\r\n      liked: false,\r\n    },\r\n  };\r\n\r\n  callbacks.forEach((cb) => cb(formSubmission));\r\n}\r\n","import React from 'react';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\nimport { createMockFormSubmission } from './service/mockServer';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <Box sx={{flexGrow: 1}}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            sx={{marginRight: 2}}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" sx={{flexGrow: 1}}>\r\n            Toast Exercise\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            color=\"secondary\"\r\n            onClick={() => createMockFormSubmission()}\r\n          >\r\n            New Submission\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nfunction LikedFormSubmissionListItem({likedForm}) {\r\n  return (\r\n    <Typography variant=\"body1\" sx={{fontStyle: 'italic', marginTop: 1}}>\r\n      {likedForm.id} | {likedForm.data.firstName} | {likedForm.data.lastName}\r\n    </Typography>\r\n  );\r\n}\r\n\r\n/**\r\n * \r\n * @param {SubmittedForm[]} likedForms An array of liked submitted form objects.\r\n * @returns Array of React nodes.\r\n */\r\nfunction generateListOfLikedFormSubmissions(likedForms) {\r\n  return likedForms.map(likedForm => <LikedFormSubmissionListItem key={likedForm.id} likedForm={likedForm} />)\r\n}\r\n\r\nexport default function Content({ likedForms }) {\r\n  return (\r\n    <Box sx={{marginTop: 3}}>\r\n      <Typography variant=\"h4\">Liked Form Submissions</Typography>\r\n\r\n      {generateListOfLikedFormSubmissions(likedForms)}\r\n    </Box>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport Snackbar from '@mui/material/Snackbar';\r\n\r\n/**\r\n * Generates toast message string.\r\n * @returns A string representing the toast message when a user submits a form.\r\n */\r\nfunction formSnackbarMessage(submittedForm) {\r\n    let message = \"First Lastname email.address@domain.com\";\r\n    if (submittedForm) {\r\n      const { data: { firstName, lastName, email } } = submittedForm;\r\n      message = `${firstName} ${lastName} ${email}`;\r\n    }\r\n    return message;\r\n}\r\n\r\nfunction Toast({ open, lastSubmittedForm, onClose, onLike }) {\r\n    /**\r\n     * Snackbar action buttons including liking form submission and closing snackbar.\r\n     */\r\n    const likeSubmissionAction = (\r\n        <React.Fragment>\r\n            <Button onClick={onLike}>\r\n            Like\r\n            </Button>\r\n            <IconButton\r\n            size=\"small\"\r\n            aria-label=\"close\"\r\n            color=\"inherit\"\r\n            onClick={(event, reason) => onClose(event, reason)}\r\n            >\r\n            <CloseIcon fontSize=\"small\" />\r\n            </IconButton>\r\n        </React.Fragment>\r\n    );\r\n\r\n    const snackbarMessage = formSnackbarMessage(lastSubmittedForm);\r\n\r\n    return <Snackbar open={open} message={snackbarMessage} action={likeSubmissionAction} />\r\n}\r\n\r\nexport default Toast;","import React from 'react';\r\nimport Container from '@mui/material/Container';\r\n\r\nimport Header from './Header';\r\nimport Content from './Content';\r\nimport Toast from './Toast';\r\n\r\nimport {saveLikedFormSubmission, onMessage, fetchLikedFormSubmissions} from './service/mockServer';\r\n\r\n/**\r\n * Main stateful class component that manages behavior of the presentational components.\r\n */\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      likedFormSubmissions: this.getPersistedLikedForms(),\r\n      bShowSnackbar: false,\r\n      lastSubmittedForm: null\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.hydrateLikedForms();\r\n  \r\n    onMessage(form => this.onFormSubmitted(form));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.persistLikedForms();\r\n    this.tearDownSnackbarTimer();\r\n  }\r\n\r\n  /**\r\n   * Update list of likedForms with what is in the server.\r\n   */\r\n  async hydrateLikedForms() {\r\n    let result;\r\n    try {\r\n      result = await fetchLikedFormSubmissions();\r\n    } catch(error) {\r\n      // Retry indefinite amount of times until we get the liked forms.\r\n      result = await this.retryUntilSucceeded(fetchLikedFormSubmissions, [], -1);\r\n    }\r\n    if (result) {\r\n      this.setState({likedFormSubmissions: result.formSubmissions});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback for when a new submission is made. Called by the server.\r\n   * @param {Object} form A form object that matches the submitted form objects.\r\n   */\r\n  onFormSubmitted(form) {\r\n    this.setState({ lastSubmittedForm: form });\r\n    this.openSnackbarFor5Seconds();\r\n  }\r\n\r\n  /**\r\n   * Manually add likedForms. This is helpful to reduce visual latency by updating UI before resolving promises\r\n   * for fetching forms from the server.\r\n   * @param {Object} likedForm A form object that matches the submitted form objects.\r\n   */\r\n  addLikedFormLocally(likedForm) {\r\n    this.setState({ likedFormSubmissions: [...this.state.likedFormSubmissions, likedForm] });\r\n  }\r\n\r\n  /**\r\n   * Save form server side. Simulate liking by closing snackbar. Also add liked form locally\r\n   * and then wait for fetching the liked forms from server.\r\n   */\r\n  likeFormSubmission = async () =>  {\r\n    const { lastSubmittedForm } = this.state;\r\n    const likedForm = {...lastSubmittedForm, data: { ...lastSubmittedForm.data, liked: true }};\r\n\r\n    this.addLikedFormLocally(likedForm);\r\n\r\n    try {\r\n      await saveLikedFormSubmission(likedForm);\r\n\r\n      this.persistLikedForms();      \r\n      this.hydrateLikedForms();\r\n    } catch(error) {\r\n      this.retryUntilSucceeded(saveLikedFormSubmission, [likedForm]);\r\n    }\r\n\r\n    this.closeSnackbar();\r\n  }\r\n\r\n  /**\r\n   * Recursively retry async calls until they are successful.\r\n   * @param {Function} asyncRequest The async method (that returns a Promise) to retry.\r\n   * @param {Any[]} args An array of arguments to pass of any type.\r\n   * @param {Number} retriesLeft Number of times to retry async request before giving up. -1 = retry infinite times.\r\n   * @returns \r\n   */\r\n  async retryUntilSucceeded(asyncRequest, args = [], retriesLeft = 3) {\r\n    if (retriesLeft === 0) {\r\n      return;\r\n    }\r\n\r\n    let result;\r\n    try {\r\n      result = await asyncRequest(...args);\r\n    } catch(error) {\r\n      result = await this.retryUntilSucceeded(asyncRequest, args, retriesLeft - 1);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Clear snackbar timeout. This is useful for cases where snackbar is called repeatedly and\r\n   * previous snackbar is removed but its 5 second timer is still running.\r\n   */\r\n  tearDownSnackbarTimer() {\r\n    if (this.snackbarTimerId) {\r\n      clearTimeout(this.snackbarTimerId);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Simple closing of snackbar.\r\n   */\r\n  closeSnackbar() {\r\n    if (this.state.bShowSnackbar) {\r\n      this.setState({bShowSnackbar: false});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup a timer for snackbar to open for 5 seconds then close.\r\n   */\r\n  openSnackbarFor5Seconds() {\r\n    this.tearDownSnackbarTimer();\r\n    this.setState({bShowSnackbar: true});\r\n    this.snackbarTimerId = setTimeout(() => this.closeSnackbar(), 5000);\r\n  }\r\n\r\n  /**\r\n   * Save liked forms to local storage.\r\n   */\r\n  persistLikedForms() {\r\n    window.localStorage.setItem('likedFormSubmissions', JSON.stringify(this.state.likedFormSubmissions));\r\n  }\r\n\r\n  /**\r\n   * Retrieve liked forms saved to local storage.\r\n   * @returns An array of liked form submissions. Empty if they were never persisted.\r\n   */\r\n  getPersistedLikedForms() {\r\n    return JSON.parse(localStorage.getItem('likedFormSubmissions')) || []\r\n  }\r\n\r\n  /**\r\n   * Close the snackbar via button click.\r\n   * @param {ClickEvent} event Node event representing button click.\r\n   * @param {String} reason How the snackbar was closed. \r\n   * @returns \r\n   */\r\n  handleCloseSnackbar(event, reason) {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    this.closeSnackbar();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <Container>\r\n          <Content likedForms={this.state.likedFormSubmissions}/>\r\n        </Container>\r\n        <Toast open={this.state.bShowSnackbar} lastSubmittedForm={this.state.lastSubmittedForm} onClose={this.handleCloseSnackbar} onLike={this.likeFormSubmission} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <CssBaseline />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}